# server.py - Environment 1
import socket
import json
import threading

class GameServer:
    def __init__(self, host='localhost', port=12345):
        self.host = host
        self.port = port
        self.clients = []
        
    def start(self):
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server.bind((self.host, self.port))
        server.listen(5)
        print(f"üöÄ Server listening on {self.host}:{self.port}")
        
        while True:
            client_socket, address = server.accept()
            print(f"üì° Connection from {address}")
            self.clients.append(client_socket)
            
            # Handle client in separate thread
            client_handler = threading.Thread(
                target=self.handle_client, 
                args=(client_socket,)
            )
            client_handler.start()
    
    def handle_client(self, client_socket):
        while True:
            try:
                # Ricevi dati dal client
                data = client_socket.recv(1024).decode('utf-8')
                if not data:
                    break
                
                # Parse JSON
                message = json.loads(data)
                print(f"üì® Received: {message}")
                
                # Processa il messaggio e invia risposta
                response = self.process_game_action(message)
                client_socket.send(json.dumps(response).encode('utf-8'))
                
            except Exception as e:
                print(f"‚ùå Error: {e}")
                break
        
        client_socket.close()
    
    def process_game_action(self, message):
        """Processa azioni di gioco"""
        action_type = message.get('type')
        data = message.get('data')
        
        if action_type == 'move_player':
            # Logica di movimento
            return {
                'status': 'success',
                'new_position': (data['x'] + 24, data['y']),
                'score': 100
            }
        elif action_type == 'get_game_state':
            return {
                'player_pos': (120, 96),
                'client_pos': (200, 150),
                'score': 250,
                'game_over': False
            }
        
        return {'status': 'unknown_action'}

if __name__ == "__main__":
    server = GameServer()
    server.start()
